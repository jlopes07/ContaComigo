@page "/"
@using ContaComigo.Shared.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Minhas Transações</PageTitle>

<h1>Minhas Transações</h1>

<p>Aqui você pode registrar e visualizar suas transações financeiras.</p>

<h2>Registrar Nova Transação</h2>
<EditForm Model="@novaTransacao" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="descricao">Descrição:</label>
        <InputText id="descricao" @bind-Value="novaTransacao.Descricao" class="form-control" />
    </div>
    <div class="form-group">
        <label for="valor">Valor:</label>
        <InputNumber id="valor" @bind-Value="novaTransacao.Valor" class="form-control" />
    </div>
    <div class="form-group">
        <label for="data">Data:</label>
        <InputDate id="data" @bind-Value="novaTransacao.Data" class="form-control" />
    </div>
    <div class="form-group">
        <label for="tipo">Tipo:</label>
        <InputSelect id="tipo" @bind-Value="novaTransacao.Tipo" class="form-control">
            @foreach (var tipo in Enum.GetValues(typeof(TipoTransacao)))
            {
                <option value="@tipo">@tipo</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="categoria">Categoria:</label>
        <InputSelect id="categoria" @bind-Value="novaTransacao.Categoria" class="form-control">
            @foreach (var categoria in Enum.GetValues(typeof(CategoriaTransacao)))
            {
                <option value="@categoria">@categoria</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-primary mt-3">Registrar</button>
</EditForm>

<h2 class="mt-5">Filtrar Transações</h2>
<EditForm Model="@filtro" OnValidSubmit="BuscarTransacoes">
    <div class="row mb-3">
        <div class="col-md-2">
            <label>Tipo:</label>
            <InputSelect @bind-Value="filtro.Tipo" class="form-control">
                <option value="">Todos</option>
                @foreach (var tipo in Enum.GetValues(typeof(TipoTransacao)))
                {
                    <option value="@tipo">@tipo</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-3">
            <label>Categoria:</label>
            <InputSelect @bind-Value="filtro.Categoria" class="form-control">
                <option value="">Todas</option>
                @foreach (var categoria in Enum.GetValues(typeof(CategoriaTransacao)))
                {
                    <option value="@categoria">@categoria</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-2">
            <label>Data Início:</label>
            <InputDate @bind-Value="filtro.DataInicio" class="form-control" />
        </div>
        <div class="col-md-2">
            <label>Data Fim:</label>
            <InputDate @bind-Value="filtro.DataFim" class="form-control" />
        </div>
        <div class="col-md-2 align-self-end">
            <button type="submit" class="btn btn-secondary">Filtrar</button>
        </div>
        <div class="col-md-1 align-self-end">
            <button type="button" class="btn btn-outline-secondary" @onclick="LimparFiltros">Limpar</button>
        </div>
    </div>
</EditForm>

@* --- SALDO FINAL --- *@
@if (transacoes != null)
{
    <div class="alert alert-info mt-4" role="alert">
        <strong>Saldo final:</strong> @SaldoFinal.ToString("C")
    </div>
}

<h2 class="mt-5">Extrato de Transações</h2>

@if (transacoes == null)
{
    <p><em>Carregando transações...</em></p>
}
else if (!transacoes.Any())
{
    <p>Nenhuma transação registrada ainda.</p>
}
else
{
    <table class="table table-striped mt-3">
        <thead>
            <tr>
                <th>Data</th>
                <th>Descrição</th>
                <th>Valor</th>
                <th>Tipo</th>
                <th>Categoria</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transacao in transacoes.OrderByDescending(t => t.Data))
            {
                if (transacaoEditando != null && transacaoEditando.Id == transacao.Id)
                {
                    <tr>
                        <td>
                            <InputDate @bind-Value="transacaoEditando.Data" class="form-control" />
                        </td>
                        <td>
                            <InputText @bind-Value="transacaoEditando.Descricao" class="form-control" />
                        </td>
                        <td>
                            <InputNumber @bind-Value="transacaoEditando.Valor" class="form-control" />
                        </td>
                        <td>
                            <InputSelect @bind-Value="transacaoEditando.Tipo" class="form-control">
                                @foreach (var tipo in Enum.GetValues(typeof(TipoTransacao)))
                                {
                                    <option value="@tipo">@tipo</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <InputSelect @bind-Value="transacaoEditando.Categoria" class="form-control">
                                @foreach (var categoria in Enum.GetValues(typeof(CategoriaTransacao)))
                                {
                                    <option value="@categoria">@categoria</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-success me-1" @onclick="SalvarEdicao">Salvar</button>
                            <button class="btn btn-sm btn-secondary" @onclick="CancelarEdicao">Cancelar</button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr class="@(transacao.Tipo == TipoTransacao.Saida ? "table-danger" : "table-success")">
                        <td>@transacao.Data.ToShortDateString()</td>
                        <td>@transacao.Descricao</td>
                        <td>
                            @(transacao.Tipo == TipoTransacao.Saida
                                ? ("-" + Math.Abs(transacao.Valor).ToString("C"))
                                : Math.Abs(transacao.Valor).ToString("C"))
                        </td>
                        <td>@transacao.Tipo</td>
                        <td>@transacao.Categoria</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-1" @onclick="() => EditarTransacao(transacao)">Editar</button>
                            <button class="btn btn-sm btn-danger btn-delete-custom"
                                    @onclick="(() => ExcluirTransacao(transacao.Id))">
                                X
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private TransacaoDto novaTransacao = new TransacaoDto();
    private IEnumerable<Transacao>? transacoes;
    private TransacaoFiltroDto filtro = new();

    // Adicionado para edição
    private Transacao? transacaoEditando;

    // Propriedade para saldo final (sempre usa valor absoluto)
    private decimal SaldoFinal =>
        transacoes == null
            ? 0
            : transacoes.Sum(t => t.Tipo == TipoTransacao.Entrada ? Math.Abs(t.Valor) : -Math.Abs(t.Valor));

    protected override async Task OnInitializedAsync()
    {
        novaTransacao.Data = DateTime.Today;
        novaTransacao.Tipo = TipoTransacao.Entrada;
        novaTransacao.Categoria = CategoriaTransacao.Outros;

        await BuscarTransacoes();
    }

    private async Task BuscarTransacoes()
    {
        try
        {
            var query = new List<string>();
            if (filtro.Tipo.HasValue)
                query.Add($"tipo={filtro.Tipo.Value}");
            if (filtro.Categoria.HasValue)
                query.Add($"categoria={filtro.Categoria.Value}");
            if (filtro.DataInicio.HasValue)
                query.Add($"dataInicio={filtro.DataInicio:yyyy-MM-dd}");
            if (filtro.DataFim.HasValue)
                query.Add($"dataFim={filtro.DataFim:yyyy-MM-dd}");

            var queryString = query.Count > 0 ? "?" + string.Join("&", query) : "";

            transacoes = await Http.GetFromJsonAsync<IEnumerable<Transacao>>($"api/transacoes{queryString}");
            StateHasChanged();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erro ao carregar transações: {ex.Message}");
        }
    }

    private void LimparFiltros()
    {
        filtro = new TransacaoFiltroDto();
        _ = BuscarTransacoes();
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/transacoes", novaTransacao);

            if (response.IsSuccessStatusCode)
            {
                novaTransacao = new TransacaoDto { Data = DateTime.Today, Tipo = TipoTransacao.Entrada, Categoria = CategoriaTransacao.Outros };
                await BuscarTransacoes();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro ao registrar transação: {response.StatusCode} - {errorContent}");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erro de rede ao registrar transação: {ex.Message}");
        }
    }

    private async Task ExcluirTransacao(Guid id)
    {
        var confirmacao = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Tem certeza que deseja excluir esta transação?" });
        if (!confirmacao)
        {
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($"api/transacoes/{id}");

            if (response.IsSuccessStatusCode)
            {
                await BuscarTransacoes();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Console.WriteLine($"Transação com ID {id} não encontrada para exclusão.");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro ao excluir transação: {response.StatusCode} - {errorContent}");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erro de rede ao excluir transação: {ex.Message}");
        }
    }

    // Métodos para edição de transação

    private void EditarTransacao(Transacao transacao)
    {
        // Cria uma cópia para edição
        transacaoEditando = new Transacao
            {
                Id = transacao.Id,
                Descricao = transacao.Descricao,
                Valor = transacao.Valor,
                Data = transacao.Data,
                Tipo = transacao.Tipo,
                Categoria = transacao.Categoria
            };
    }

    private void CancelarEdicao()
    {
        transacaoEditando = null;
    }

    private async Task SalvarEdicao()
    {
        if (transacaoEditando == null)
            return;

        try
        {
            var response = await Http.PutAsJsonAsync($"api/transacoes/{transacaoEditando.Id}", transacaoEditando);

            if (response.IsSuccessStatusCode)
            {
                transacaoEditando = null;
                await BuscarTransacoes();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erro ao atualizar transação: {response.StatusCode} - {errorContent}");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Erro de rede ao atualizar transação: {ex.Message}");
        }
    }
}
