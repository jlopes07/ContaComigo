@page "/"
@using ContaComigo.Shared.Models 
@inject HttpClient Http 
@using System.Linq 
@using System.Globalization

<PageTitle>Home</PageTitle>

<h1>Minhas Transações</h1>

@if (transacoes == null)
{
    <p><em>Carregando transações...</em></p>
}
else if (!transacoes.Any())
{
    <p>Nenhuma transação encontrada.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Descrição</th>
                <th>Valor</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transacao in transacoes)
            {
                <tr>
                    <td>@transacao.Descricao</td>
                    <td>@transacao.Valor.ToString("C")</td> @* Formata como moeda *@
                    <td>@transacao.Data.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

<h2 class="mt-4">Registrar Nova Transação</h2>

<div class="card p-3">
    @* Adicionando FormName="transacaoForm" para resolver o erro de submissão do formulário *@
    <EditForm Model="@novaTransacao" OnValidSubmit="@HandleValidSubmit" FormName="transacaoForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="descricao" class="form-label">Descrição:</label>
            @* Usando @bind-Value e @oninput para forçar a atualização **********************************************************************************************************************************************************************************************@
            <InputText id="descricao" class="form-control" @bind-Value="novaTransacao.Descricao" @oninput="@((e) => OnDescricaoInput(e.Value?.ToString() ?? string.Empty))" />
            <ValidationMessage For="@(() => novaTransacao.Descricao)" />
        </div>

        <div class="mb-3">
            <label for="valor" class="form-label">Valor:</label>
            @* Usando InputNumber com CultureInfo.InvariantCulture *@
            <InputNumber id="valor" class="form-control" @bind-Value="novaTransacao.Valor" Culture="System.Globalization.CultureInfo.InvariantCulture" />
            <ValidationMessage For="@(() => novaTransacao.Valor)" />
        </div>

        <div class="mb-3">
            <label for="data" class="form-label">Data:</label>
            @* Usando InputDate *@
            <InputDate id="data" class="form-control" @bind-Value="novaTransacao.Data" />
            <ValidationMessage For="@(() => novaTransacao.Data)" />
        </div>

        <button type="submit" class="btn btn-primary">Registrar Transação</button>
    </EditForm>
</div>


@code {
    private List<Transacao>? transacoes;
    private Transacao novaTransacao = new Transacao(); 

    // Método para tratar a entrada da descrição
    private void OnDescricaoInput(string value)
    {
        novaTransacao.Descricao = value;
        // Força a re-renderização e reavaliação da validação para o campo Descrição.
        // Isso pode ser a chave para resolver o problema de validação em tempo real.
        StateHasChanged(); 
        Console.WriteLine($"DEBUG: Descrição atualizada para '{novaTransacao.Descricao}'");
    }

    protected override async Task OnInitializedAsync()
    {
        // A configuração da cultura agora está no Program.cs do cliente para ser global.
        Console.WriteLine("DEBUG: Cultura definida para en-US (agora via Program.cs).");

        await CarregarTransacoes();
    }

    private async Task CarregarTransacoes()
    {
        try
        {
            transacoes = await Http.GetFromJsonAsync<List<Transacao>>("api/transacoes");
            Console.WriteLine($"DEBUG: Transações carregadas. Total: {transacoes?.Count ?? 0}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Erro ao carregar transações: {ex.Message}");
            transacoes = new List<Transacao>(); 
        }
    }

    private async Task HandleValidSubmit()
    {
        // Se o depurador não parar aqui, é porque o formulário ainda não é considerado válido.
        Console.WriteLine($"DEBUG: HandleValidSubmit chamado. Descrição: '{novaTransacao.Descricao}'");
        Console.WriteLine($"DEBUG: Valor: '{novaTransacao.Valor}'");
        Console.WriteLine($"DEBUG: Data: '{novaTransacao.Data}'");

        try
        {
            var response = await Http.PostAsJsonAsync("api/transacoes", novaTransacao);

            if (response.IsSuccessStatusCode)
            {
                await CarregarTransacoes();
                novaTransacao = new Transacao(); 
                Console.WriteLine("DEBUG: Transação adicionada com sucesso!");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"DEBUG: Erro ao adicionar transação: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Erro inesperado ao enviar transação: {ex.Message}");
        }
    }
}